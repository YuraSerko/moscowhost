# -*-coding=utf-8-*-

from django.http import Http404, HttpResponse, HttpResponseRedirect
from lib.decorators import render_to, login_required
# from payment.webmoney.forms import WebmoneyPaymentRequestForm, WebmoneyPaymentRequestFormCard
from payment.webmoney_merchant.models import Invoice_wm_merchant
from payment.webmoney.forms import WMPaymentRequestFormCard
from payment import settings as payment_settings
from payment.models import Billservice_transaction
import log
from django.utils.translation import ugettext as _
from django.shortcuts import render_to_response
import base64
import datetime, time, decimal
import hashlib
from page.views import panel_base_auth
from payment.forms import webmoney_money
from lib.mail import send_email
from django.template import Template, Context
from django.conf import settings
from django.shortcuts import render


#==================================================================================================================================================


@login_required
@render_to("wm_payment_merchant.html")
def payment_wm_merchant(request):
    "Отображает интерфейс для оплаты вебманями"
    profile = request.user.get_profile()

    if profile.is_juridical:
        raise Http404
    user = request.user
    context = {}
    context['payment_page'] = True #for menu
    form = webmoney_money()
    if request.POST:
        form = webmoney_money(request.POST)
        if form.is_valid():
            try:
                profile = user.get_profile()
                inv = Invoice_wm_merchant()
                inv.amount = form.cleaned_data['money']
                inv.desc = _(u"Пополнение счета через WebMoney")
                inv.account = profile.billing_account
                inv.currency = 'RUB'
                inv.type = 1
                # inv.payer_phone_number = request.POST.get("LMI_PAYER_PHONE_NUMBER", "")
                inv.payer_email = request.POST.get("LMI_PAYER_EMAIL", "")
                inv.save()

                #context["merchant_id"] = payment_settings.WM_MERCHANT_ID
                #LMI_PAYEE_PURSE
                context["payee_purse"] = payment_settings.LMI_PAYEE_PURSE
                context["amount"] = inv.amount
                context["currency"] = inv.currency
                context["payment_id"] = inv.id  # наш внутренний номер платежа
                context["payment_name"] = inv.desc  # название платежа
                context["payment_name_base64"] = base64.standard_b64encode(inv.desc.encode('utf-8'))  # название платежа в base64 в (utf-8!!!)
                context["sim_mode"] = payment_settings.WM_SIM_MODE
                # context["payer_phone_number"] = inv.payer_phone_number # номер телефона пользователя
                context["payer_email"] = inv.payer_email  # почта пользователя
                context["account_id"] = inv.account.id  # id пользователя в биллинге
                context["type"] = inv.type  # тип платежа
                return context
            except Exception, e:
                print 'In exception'
                print e
                log.add(u"payment_wm_start Except: %s" % e)
                raise Http404
        else:
            context['form'] = form
            request.notifications.add(u"Ошибка в заполнении полей", "error")
            return context
    else:
        context['form'] = form
    return context


#==================================================================================================================================================
@render_to("wm_payment_merchant_public.html")
def payment_wm_merchant_public(request):
   
    context = {}
    context['payment_merchant_public_page'] = True
    form = webmoney_money()
    if request.POST and not request.POST.has_key('username'): #чтобы можно было логиниться()
        profile = request.user.get_profile() 
        user = request.user    
        form = webmoney_money(request.POST)
        if form.is_valid():
            try:
                profile = user.get_profile()
                inv = Invoice_wm_merchant()
                inv.amount = form.cleaned_data['money'] # money из ajax_payment_step_login
                inv.desc = _(u"Пополнение счета через WebMoney")
                inv.account = profile.billing_account
                inv.currency = 'RUB'
                inv.type = 1
                # inv.payer_phone_number = request.POST.get("LMI_PAYER_PHONE_NUMBER", "")
                inv.payer_email = request.POST.get("LMI_PAYER_EMAIL", "")
                inv.save()

                #context["merchant_id"] = payment_settings.WM_MERCHANT_ID
                #LMI_PAYEE_PURSE
                context["payee_purse"] = payment_settings.LMI_PAYEE_PURSE
                context["amount"] = inv.amount
                context["currency"] = inv.currency
                context["payment_id"] = inv.id  # наш внутренний номер платежа
                context["payment_name"] = inv.desc  # название платежа
                context["payment_name_base64"] = base64.standard_b64encode(inv.desc.encode('utf-8'))  # название платежа в base64 в (utf-8!!!)
                context["sim_mode"] = payment_settings.WM_SIM_MODE
                # context["payer_phone_number"] = inv.payer_phone_number # номер телефона пользователя
                context["payer_email"] = inv.payer_email  # почта пользователя
                context["account_id"] = inv.account.id  # id пользователя в биллинге
                context["type"] = inv.type  # тип платежа
                return context
            except Exception, e:
                print 'In exception'
                print e
                log.add(u"payment_wm_start Except: %s" % e)
                raise Http404
        else:
            context['form'] = form
            request.notifications.add(u"Ошибка в заполнении полей", "error")
            return panel_base_auth(request, context)
    else:
        context['form'] = form
    return panel_base_auth(request, context)
#==================================================================================================================================================

from account.forms import UserLoginForm2, UserRegistrationForm, UserLoginForm
from django.core.urlresolvers import reverse
from django.utils import simplejson
from django.contrib.auth import login
from django.template import RequestContext
from account.models import ActionRecord
#логирование/регистрация в payment False
def ajax_payment_step_auth(request, account):
    print 'ajax_payment_step_auth'
    print '222222222222222222222222222222222'
    param, context = {}, {}
    try:
        account = eval(account)
        #if request.GET.has_key('summa'):
        #    print '2.5s'
        #    print request.GET.get('summa')
            #summa = int(request.GET['summa'])
        #    print '333333333333333333333333333333333'
            #get_object_or_404(Servers, id=server_id)
            #count_ip, speed_inet_id, software_list = int(request.GET['count_ip']), int(request.GET['speed_inet']), request.GET['software_ids']
#         else:
#             cpu_id = int(request.GET['cpu_id'])
#             get_object_or_404(CPU, id=cpu_id)
#             count_ram = int(request.GET['count_ram'])
#             count_hdd = int(request.GET['count_hdd'])
#             count_ssd = int(request.GET['count_ssd'])
#         count_ip = int(request.GET['count_ip'])
    except:
        raise Http404
    #print 'pered try count_ip = %s' % count_ip
    #if ((count_ip < 0) or (count_ip > dict_count_ip_for_service[11])):
    #    raise Http404
    #if request.GET.has_key('server_id'):
    #    param['server_id'], param['count_ip'], param['speed_inet_id'], param['software_ids'] = server_id, count_ip, speed_inet_id, software_list
        #param['server_id'], param['count_ip'], param['speed_inet_id'] = server_id, count_ip, speed_inet_id
#     else:
#         param['cpu_id'], param['count_ram'], param['count_hdd'], param['count_ssd'] = cpu_id, count_ram, count_hdd, count_ssd
#    param['count_ip'] = count_ip
    context['data'] = simplejson.dumps(param)
    if not account:
        param['face'] = request.GET['face']
        #print 'face = %s' % param['face']
        #context['server_id'] = server_id
        if param['face'] == '0':
            form_reg = UserRegistrationForm()
            context['form_reg'] = form_reg
            return render_to_response("step_reg.html", context)
            #return context
        elif param['face'] == '1':
            form_login = UserLoginForm2()
            context['form_login'] = form_login
            return render_to_response("step_login.html", context)
        # если пользователь уже в системе
        elif param['face'] == '2':
            '''
            successfully_create = create_package(request.user,
                                reverse('add_virtual_server_final'),
                                reverse('my_data_centr'),
                                '%s' % param,
                                ['telematic_data_centr', 'dogovor_arendi_serverov', 'akt_priemki_oborudovania', 'usluga_peredachi_dannyh_s_predoplatoi'])
            if not successfully_create:
                print 'not succesfully'
                raise Http404
            '''
            return render_to_response("s8.html", context)
    else:
        '''
        successfully_create = create_package(request.user,
                                reverse('add_virtual_server_final'),
                                reverse('my_data_centr'),
                                '%s' % param,
                                ['telematic_data_centr', 'dogovor_arendi_serverov', 'akt_priemki_oborudovania', 'usluga_peredachi_dannyh_s_predoplatoi'])
        
        if not successfully_create:
            print 'not succesfully'
            raise Http404
        '''
        return HttpResponseRedirect(reverse('add_virtual_server_final'))
#=====================================================================================================================================

def ajax_payment_step_login(request):
    print 'ajax_payment_step_login'
    print request.GET['data'] # summa
    context = {}
    #context['summa'] = request.GET['data']
    errors = {}
    form_login = UserLoginForm2(request.GET)
    context['form_login'] = form_login
    #print request.GET
#     try:
#         param = simplejson.loads((str(request.GET['data'])).strip('/'))
#     except Exception, e:
#         raise Http404
    #context['data'] = simplejson.dumps(param)
    #print ''
    #context['server_id'] = param['server_id']
    try:
        if form_login.is_valid():
            user = form_login.user
            if user:
                if user.is_active:
                    #логинимся
                    login(request, user)
                    #готовим параметры для html
                    profile = user.get_profile()
                    inv = Invoice_wm_merchant()
                    inv.amount = int(request.GET['data']) #amount of money
                    inv.desc = _(u"Пополнение счета через WebMoney")
                    inv.account = profile.billing_account
                    inv.currency = 'RUB'
                    inv.type = 1
                    inv.payer_phone_number = request.POST.get("LMI_PAYER_PHONE_NUMBER", "")
                    inv.payer_email = request.POST.get("LMI_PAYER_EMAIL", "")
                    
                    
                    #context["merchant_id"] = payment_settings.WM_MERCHANT_ID
                    #LMI_PAYEE_PURSE
                    context["payee_purse"] = payment_settings.LMI_PAYEE_PURSE
                    context["amount"] = inv.amount
                    context["currency"] = inv.currency
                    context["payment_id"] = inv.id  # наш внутренний номер платежа
                    context["payment_name"] = inv.desc  # название платежа
                    context["payment_name_base64"] = base64.standard_b64encode(inv.desc.encode('utf-8'))  # название платежа в base64 в (utf-8!!!)
                    context["sim_mode"] = payment_settings.WM_SIM_MODE
                    # context["payer_phone_number"] = inv.payer_phone_number # номер телефона пользователя
                    context["payer_email"] = inv.payer_email  # почта пользователя
                    context["account_id"] = inv.account.id  # id пользователя в биллинге
                    context["type"] = inv.type  # тип платежа
                    #окончание подготовки параметров для html
                    return render_to_response("wm_payment_merchant_public_auth.html", context) #original working well
                    #return render_to_response("wm_payment_merchant_public_auth.html", context) 
                    
            if user is None:
                errors['error_auth'] = True
                context['errors'] = errors
                return render_to_response("step_login.html", context)
        else:
            errors['error_auth'] = True
            context['errors'] = errors
            return render_to_response("step_login.html", context)
    except Exception, e:
        print e
    else:
        return render_to_response("step_login.html", context)
#==================================================================================================================================================
def ajax_payment_step_registration(request):
    print 'ajax_payment_step_register'
    print 'here will be summa'
    print request.GET['data'] # summa
    context = {}
    errors = {}
    form_reg = UserRegistrationForm(request.GET)
    context['form_reg'] = form_reg
    context['payment_page_reg'] = True
    #print request.GET
#     try:
#         param = simplejson.loads((str(request.GET['data'])).strip('/'))
#     except Exception, e:
#         raise Http404
    #context['data'] = simplejson.dumps(param)
    #print ''
    #context['server_id'] = param['server_id']
    if form_reg.is_valid():
        user = form_reg.save()
        ActionRecord.registrations.create_inactive_user_key(
            new_user=user,
            row_password=user.password,
            #row_password=form_reg.get_row_password(),
            send_email=True,
            )
        return render_to_response("s8_reg.html", context)
    else:
        errors['error_auth'] = True
        context['errors'] = errors
        return render_to_response("step_reg.html", context)

#==================================================================================================================================================
@login_required
@render_to("payment_end.html")
def payment_wm_merchant_success(request):
    "Страница, на которую прийдет запрос об успешном завершении перевода вебманей"
    context = {}
    context['hide_review'] = True
    context['title'] = u'Уведомление об успешном пополнении счета'
    request.notifications.add(u'Оплата успешно произведена, спасибо!', 'success')
    return context

#==================================================================================================================================================

@login_required
@render_to("payment_end.html")
def payment_wm_merchant_error(request):
    "Страница, на которую прийдет запрос о неудачном завершении операции с вебманями"
    context = {}
    context['title'] = u'Уведомление о неудачном пополнении счета'
    request.notifications.add(u'Оплата не была произведена.', 'error')
    return context

#==================================================================================================================================================

def payment_wm_merchant_process(request):
    "Страница, на которую прийдет запрос о совершении платежа"
    if not request.POST:  # Если нет POST данных генерируем ошибку
        log.add("1 payment_wm_process POST: None")
        raise Http404

    log.add("2 payment_wm_process POST: '%s'" % (repr(request.POST)))

    class WMError(Exception): pass

    try:
        prerequest = request.POST.get("LMI_PREREQUEST", "")
        #merchant_id = request.POST.get("LMI_MERCHANT_ID", "")
        payee_purse = request.POST.get("LMI_PAYEE_PURSE", "")
        payment_no = request.POST.get("LMI_PAYMENT_NO", "")
        payment_amount = request.POST.get("LMI_PAYMENT_AMOUNT", "")
        currency = request.POST.get("LMI_CURRENCY", "")
        paid_amount = request.POST.get("LMI_PAID_AMOUNT", "")
        paid_currency = request.POST.get("LMI_PAID_CURRENCY", "")
        payment_system = request.POST.get("LMI_PAYMENT_SYSTEM", "")
        sim_mode = request.POST.get("LMI_SIM_MODE", "")
        payment_desc = request.POST.get("LMI_PAYMENT_DESC", "")
        id = request.POST.get("LMI_PAYMENT_NO", "")
        lmi_hash = request.POST.get(u"LMI_HASH", "")
        sys_payment_id = request.POST.get(u"LMI_SYS_PAYMENT_ID", "")
        sys_payment_date = request.POST.get(u"LMI_SYS_PAYMENT_DATE", "")
        payer_phone_number = request.POST.get(u"LMI_PAYER_PHONE_NUMBER", "")
        payer_email = request.POST.get(u"LMI_PAYER_EMAIL", "")
        payment_type = request.POST.get("type", "")
        account_id = request.POST.get("account_id", "")
        """Проверяем запрашивали ли мы такой платеж"""
        try:
            inv = Invoice_wm_merchant.objects.get(id=id)
        except Invoice_wm_merchant.DoesNotExist:
            raise WMError(u"Запрос платежа с указанным id не найден")
        if inv.end:
            raise WMError(u"Платеж с таким номером уже существует")

        
#         if merchant_id != payment_settings.WM_MERCHANT_ID:
#             raise WMError(u"Получен не верный ID продавца")
        
        
        if payee_purse != payment_settings.LMI_PAYEE_PURSE:
            raise WMError(u"Получен не верный ID продавца")
        
        
        if decimal.Decimal(payment_amount) != inv.amount:
            raise WMError(u"Получена не верная сумма оплаты")

        if payment_type != str(inv.type):
            raise WMError(u"Получен ошибочный тип платежа")

        if account_id != str(inv.account_id if inv.account_id else ""):
            log.add(u"account_id=%s inv.account_id=%s" % (account_id, str(inv.account_id if inv.account_id else "")))
            raise WMError(u"Получен не верный номер аккаунта")


#        if payer_phone_number != inv.payer_phone_number:
#            raise WMError(u"Получен не верный номер телефона плательщика")
#        if payer_phone_email != inv.payer_email:
#            raise WMError(u"Получен не верный email плательщика")

        if prerequest == u'1' or prerequest == u'2':
            log.add("3 payment_wm_process prerequest")
            return HttpResponse(u"YES")
        """Проверяем подпись запроса"""
        try:
            pre_hash = (payee_purse,
                        payment_no,
                        sys_payment_id,
                        sys_payment_date,
                        payment_amount,
                        currency,
                        paid_amount,
                        paid_currency,
                        payment_system,
                        sim_mode,
                        payment_settings.WM_PASSPHRASE,
                        )
            pre_hash_str = ";".join(pre_hash)
            key = hashlib.md5()
            key.update(pre_hash_str)
            hash = base64.standard_b64encode(key.digest())
            # log.add(hash)
        except Exception, e:
            raise WMError(u"Ошибка при подсчете hash: %s" % str(e))
        if lmi_hash != hash:
            raise WMError(u"Получен не верный hash")

        if payment_type == u'1':  # Пополнение счета
            try:
                log.add(u"payment_wm type=1")
                # Сохраняем информацию по платежу в БД
                inv.paid_amount = paid_amount
                inv.paid_currency = paid_currency
                inv.payment_system = payment_system
                inv.sim_mode = int(sim_mode if sim_mode else "0")
                date = datetime.datetime(*time.strptime(sys_payment_date, "%Y-%m-%dT%H:%M:%S")[0:5])
                inv.sys_trans_date = date
                inv.sys_payment_id = sys_payment_id
                inv.end = True
                inv.payer_phone_number = payer_phone_number
                inv.payer_email = payer_email
                # inv.save()

                # Создаем транзакцию на пополнение счета
                trn = Billservice_transaction()
                trn.bill = inv.desc
                trn.account = inv.account
                trn.type_id = 'WEBMONEY_PAYMENT'
                trn.approved = True
                trn.tarif_id = 0
                trn.summ = inv.amount
                trn.description = inv.desc
                trn.save()

                trn_new = Billservice_transaction.objects.get(bill=trn.bill,
                                                               account=trn.account,
                                                               type_id=trn.type_id,
                                                               approved=trn.approved,
                                                               tarif_id=trn.tarif_id,
                                                               summ=trn.summ,
                                                               description=trn.description,
                                                               created=trn.created,
                                                               )
                inv.transaction_id = trn_new.id
                inv.save()
                log.add(u"payment_wm Success!!")
                return HttpResponse(u"OK")
            except Exception, e:
                log.add(u"payment_wm Except: %s" % e)
                raise WMError(u"Ошибка записи в БД")
        

        else:
            raise WMError(u"Неизвестный тип платежа")
        
        
        

    except WMError, e:
        log.add(u"98payment_wm Error: %s" % e)
        return HttpResponse(e)


    except Exception, e:
        log.add(u"99payment_wm Error: %s" % e)
        raise Http404
#==================================================================================================================================================

