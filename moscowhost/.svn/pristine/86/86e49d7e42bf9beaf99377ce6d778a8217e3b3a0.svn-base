#!/usr/bin/env python
# -*-coding=utf-8-*-

"""
This file demonstrates writing tests using the unittest module. These will pass
when you run "manage.py test".

Replace this with more appropriate tests for your application.
"""

from django.test import TestCase


class SimpleTest(TestCase):
    def test_basic_addition(self):
        """
        Tests that 1 + 1 always equals 2.
        """
        self.assertEqual(1 + 1, 2)


import base64
from Crypto.Cipher import AES
import hashlib
from urllib import quote, unquote

API_KEY = "r1l1lf43ithu2j1v573kk6v75j"
AuthSign = '45'
url_net2pay_pay = 'https://my.net2pay.ru/billingService/paypage/'
SUCCESS_URL = 'http://globalhome.su/account/'
FAIL_URL = 'http://globalhome.su/account/'

def md5_base64(text):
    m = hashlib.md5()
    m.update(text)
    r = m.digest()
    return r.encode('base64').strip()

def crypt_param(val, key):
    BLOCK_SIZE = 16
    PADDING = chr(BLOCK_SIZE - len(val) % BLOCK_SIZE)
    pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING
    EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
    cipher = AES.new(key)
    encoded = EncodeAES(cipher, val)
    # print 'Encrypted string:', encoded
    return encoded

def decrypt_param(val, key):
    DecodeAES = lambda c, s: c.decrypt(base64.b64decode(s))
    cipher = AES.new(key)
    decoded = DecodeAES(cipher, val)
    padding = decoded[-1:]
    res = decoded.replace(padding, '')
    return res


 #    url = 'http://globalhome.su/payment/netpay/process/'
 #    params = {'data': '8kck8%2Bh4Wn8MyViVcnLQWw%3D%3D%26pb2xMiBxclZoKen0whizwg%3D%3D%26vuODydS7GtpGhZ%2B75WllDQ%3D%3D%26bjMpgCcMfgcCLvfBOCycjclrOL%2FBIe06iHq30YN091s%3D',
 #              'auth': 'auth',
 #              'expire': '2014-06-11V13%3A47%3A20',
 #              }
 #    login_data = urllib.urlencode(params)
 #    cj = cookielib.CookieJar()
 #    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
 #    urllib2.install_opener(opener)
 #    resp = opener.open(url, login_data)
 #    res = resp.read()
    expire = '2014-06-11V13%3A47%3A20'
    data = '8kck8%2Bh4Wn8MyViVcnLQWw%3D%3D%26pb2xMiBxclZoKen0whizwg%3D%3D%26vuODydS7GtpGhZ%2B75WllDQ%3D%3D%26bjMpgCcMfgcCLvfBOCycjclrOL%2FBIe06iHq30YN091s%3D'

    "Получаем ключ для расшифровки сообщения"
    md5_api_key = md5_base64(API_KEY)
    order_date = unquote(expire)
    crypt_key = md5_base64(md5_api_key + order_date)[:16]
    print 'unq_data=%s' % unquote(data)
    params = {}
    for d in unquote(data).split('&'):
        print 'd=%s' % d
        r = decrypt_param(d, crypt_key)
        print "r=%s" % r
        try:
            k, v = r.split('=')
            params[k] = v
        except Exception, e:
            print e


    order_id = params.get('orderID', '')
    print "order_id=%s" % order_id
    status = params.get('status', '')
    print "status=%s" % status
    error = params.get('error', '')
    print "error=%s" % error
