#!/usr/bin/env python
# -*-coding=utf-8-*-


import sys
import datetime
from math import ceil
import urllib, urllib2, cookielib, json
import os
import time
sys.path.append('../../')
sys.path.append('../')
from internet_providers.mts import get_balance
# from mts import get_balance
import logging

ADRESS = 'https://login.mts.ru/'
MIN_BALANCE_FOR_ADD_SERVICE = 2.1
GROUP_SIM = 5
GROUP_QIWI = 10
MIN_BALANCE = 2.10
MIN_BALANCE_QIWI = 25
QIWI_PASSWORD = 'asdqwe123'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'noc@dialpeer.org'
EMAIL_HOST_PASSWORD = 'ndjhtw'
MAILS = [  # 'evgeniy_x1991@globalhome.su',
         'trin@dialpeer.org',
         'fora11@yandex.ru',
        ]

QIWI_LOGINS = [ '+79154545176',
                '+79154545183',
                '+79154545308',
                '+79154545298',
                '+79154545208',
                '+79154545206',
                '+79154545203',
                '+79154545201',
                '+79154545199',
                '+79154545196',
                '+79154545193',
                '+79154545189',
                '+79154545187',
                '+79154545186',
                '+79154545182',
                '+79194107981',
                '+79153366860',
                '+79152626204',
                '+79152626171',
                '+79152626221',
                '+79152626250',
                '+79153366920',
                '+79153366917',
                '+79153366578',
                '+79153366916',
                '+79153366904',
                '+79152626786',
                '+79152626602',
                '+79152626569',
                '+79152626615',
                '+79152626576',
                '+79154121214',
                '+79154120070',
                '+79152626609',
                '+79153366946',
                '+79153366921',
                '+79152626747',
                '+79152626742',
                '+79175677855',
                '+79152626720',
                '+79152626680',
                '+79175677803',
                '+79175679073',
                '+79175677811',
                '+79175679079',
                '+79175677463',
                '+79152629229',
                '+79152626294',
                '+79152626292',
                '+79152626768',
                '+79152626275',
                '+79152626366',
                '+79153366945',
                '+79152626360',
                '+79153366865',
                '+79152626372',
                ]

class ExceptionPageDontAvalaible(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return u"Страница %s не доступна" % self.value

class ExceptionChangeLocationOfTags(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return u"Изменилось расположение тегов. Заданные теги не найдены %s" % self.value


class ExceptionIncorrectData(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return u"Неправильно введены логин или пароль"


def send_mail(mail_from, password, mail_to, subject, text, servername="smtp.gmail.com", files=[], performDebugging=False, name_from='', name_to=''):
    import smtplib
    import os
    import email.utils
    from email.MIMEMultipart import MIMEMultipart
    from email.MIMEBase import MIMEBase
    from email.MIMEText import MIMEText
    from email.Utils import COMMASPACE, formatdate
    from email import Encoders
    # assert type(send_to)==list
    assert type(files) == list


    msg = MIMEMultipart()
    msg.set_charset('utf-8')
    msg['From'] = email.utils.formataddr((name_from, mail_from))
    msg['To'] = email.utils.formataddr((name_to, mail_to))
    msg['Subject'] = subject
    msg['Date'] = formatdate(localtime=True)
    msg.attach(MIMEText(text, 'html' if 'html' in text.lower() else ''))
    msg.set_charset('utf-8')
    for f in files:
        part = MIMEBase('application', "octet-stream")
        part.set_payload(open(f, "rb").read())
        Encoders.encode_base64(part)
        part.add_header('Content-Disposition', 'attachment; filename="%s"' % os.path.basename(f))
        msg.attach(part)
    server = smtplib.SMTP(servername, 587)
    try:
        server.set_debuglevel(performDebugging)
        # start the SMTP twitter
        server.ehlo()
        # start encryption if feature is supported by server
        if server.has_extn('STARTTLS'):
            server.starttls()
            # restart SMTP session over TLS connection
            server.ehlo()
            server.login(mail_from, password)
            server.sendmail(mail_from, mail_to, msg.as_string())
        else:
            raise Exception('STARTTLS extension not supported by server')
    finally:
        server.quit()


def pay_mts_from_qiwi(numbers, login, password, log):
    """Функция подключается к qiwi.кошелек и пополняет баланс на счету mts"""

    site_url = 'https://qiwi.ru/'
    login_url = site_url + 'auth/login.action'
    action_url = site_url + 'payment/form.action?provider=1'
    payment_url = site_url + 'user/payment/form/state.action'
    payment_url2 = site_url + '/provider/content/categorypath.action'
    good_upd_bal = []

    ok = 5
    while ok:
        ok -= 1
        try:
            cj = cookielib.CookieJar()
            opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
            opener.addheaders = [('User-agent', 'Mozilla/5.0 (Windows; U; Windows NT 5.1; ru; rv:1.9.2.22) Gecko/20110902 Firefox/3.6.22')]
            urllib2.install_opener(opener)
            opener.addheaders = [('X-Requested-With', 'XMLHttpRequest'),
                                 ('Pragma', 'no-cache'),
                                 ('Referer', 'https://qiwi.ru/payment/form.action?provider=1'),
                                 ('Accept', 'application/json, text/javascript, */*; q=0.01')]
            login_data = urllib.urlencode({'source' : 'menu', 'login' : login, 'password' : password})
            resp = opener.open(login_url, login_data)
            res = resp.read()
            r = json.loads(res)
            token = r["data"]["token"]
            login_data = urllib.urlencode({'source' : 'menu', 'login' : login, 'password' : password, 'loginToken':token})
            resp = opener.open(login_url, login_data)
            res = resp.read()
            r = json.loads(res)
            result = r["code"]["value"]
            login_to = False
            if result == '0':
                login_to = True
            resp = opener.open(action_url)
            res = resp.read()
            ok = False
        except Exception, x:
            log.info(u"Ошибка открытия страницы %s" % x)
            exc_type, exc_obj, exc_tb = sys.exc_info()  # @UnusedVariable
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            log.info(u"Exception: file:%s line:%s" % (fname, exc_tb.tb_lineno))
            # exit()

    if not login_to:
        log.info(u"Ошибка доступа в кабинет qiwi")
        return []
    """Проверка баланса кошелька"""
    b = res[res.find('<div class="account_current" data-container-name="account-this">') + len('<div class="account_current" data-container-name="account-this">'):]
    try:
        balance = float(b[:b.find('<')].strip().replace(',', '.').replace(' ', ''))
    except:
        balance = 0
    log.info(u'Баланс кошелька %s составляет: %s' % (login, balance))

    i = 0
    for num, pay_sum in numbers:
        i += 1
        ok = 5
        while ok:
            ok -= 1
            try:
                resp = opener.open(action_url)
                res = resp.read()
                login_data = urllib.urlencode({"extra['account']": "(%s)%s-%s-%s" % (num[:3], num[3:6], num[6:8], num[8:]),  # (916)902-43-14",
                                               "source": "qiwi_RUB",
                                               "amountInteger": pay_sum,
                                               "amountFraction": "",
                                               "currency": "RUB",
                                               "extra['comment']": "",
                                               "state": "CONFIRM",
                                               "protected": "true",
                                               }
                                              )
                resp = opener.open(payment_url, login_data)
                res = resp.read()
                r = json.loads(res)
                token = r["data"]["token"]
                login_data = urllib.urlencode({"extra['account']": "(%s)%s-%s-%s" % (num[:3], num[3:6], num[6:8], num[8:]),
                                               "source": "qiwi_RUB",
                                               "amountInteger": pay_sum,
                                               "amountFraction": "",
                                               "currency": "RUB",
                                               "extra['comment']": "",
                                               "state": "CONFIRM",
                                               "protected": "true",
                                               "token": token,
                                               }
                                              )
                resp = opener.open(payment_url, login_data)
                res = resp.read()
                login_data = urllib.urlencode({"state": "PAY"})
                resp = opener.open(payment_url, login_data)
                res = resp.read()
                r = json.loads(res)
                token = r["data"]["token"]
                login_data = urllib.urlencode({"token": token, "state": "PAY"})
                resp = opener.open(payment_url, login_data)
                res = resp.read()
                if 'Ваш платеж принят в обработку.' in res:
                    log.info(u'Оплачено: %s %s' % (num, pay_sum))
                    good_upd_bal.append(num)
                else:
                    log.info(u'Не оплачено: %s %s' % (num, pay_sum))
                ok = False
            except Exception, x:
                log.info(u"Ошибка открытия страницы %s" % x)
                exc_type, exc_obj, exc_tb = sys.exc_info()  # @UnusedVariable
                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                log.info(u"Exception: file:%s line:%s" % (fname, exc_tb.tb_lineno))
                # exit()
    return good_upd_bal


def qiwi_get_balance(login, password, log, k):
    """Функция получает баланс на кошельке"""

    site_url = 'https://qiwi.ru/'
    login_url = site_url + 'auth/login.action'
    action_url = site_url + 'payment/form.action?provider=1'

    ok = True
    while ok:
        try:
            cj = cookielib.CookieJar()
            opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
            opener.addheaders = [('User-agent', 'Mozilla/5.0 (Windows; U; Windows NT 5.1; ru; rv:1.9.2.22) Gecko/20110902 Firefox/3.6.22')]
            urllib2.install_opener(opener)
            opener.addheaders = [('X-Requested-With', 'XMLHttpRequest'),
                                 ('Pragma', 'no-cache'),
                                 ('Referer', 'https://qiwi.ru/payment/form.action?provider=1'),
                                 ('Accept', 'application/json, text/javascript, */*; q=0.01')]
            login_data = urllib.urlencode({'source' : 'menu', 'login' : login, 'password' : password})
            resp = opener.open(login_url, login_data)
            res = resp.read()
            r = json.loads(res)
            token = r["data"]["token"]
            login_data = urllib.urlencode({'source' : 'menu', 'login' : login, 'password' : password, 'loginToken':token})
            resp = opener.open(login_url, login_data)
            res = resp.read()
            r = json.loads(res)
            result = r["code"]["value"]
            login_to = False
            if result == '0':
                login_to = True
            resp = opener.open(action_url)
            res = resp.read()
            ok = False
        except Exception, x:
            log.info(u"Ошибка открытия страницы %s" % x)
            exc_type, exc_obj, exc_tb = sys.exc_info()  # @UnusedVariable
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            log.info(u"Exception: file:%s line:%s" % (fname, exc_tb.tb_lineno))
            exit()

    if not login_to:
        log.info(u"Ошибка доступа в кабинет qiwi: %s" % login)
        return []
    """Проверка баланса кошелька"""
    b = res[res.find('<div class="account_current" data-container-name="account-this">') + len('<div class="account_current" data-container-name="account-this">'):]
    try:
        balance = float(b[:b.find('<')].strip().replace(',', '.').replace(' ', ''))
    except Exception, e:
        print e
        exit()
        balance = None
    log.info(u'%s Баланс кошелька %s составляет: %s' % (k, login, balance))
    return balance


def pay_qiwi_from_qiwi(numbers, qiwi_logins, password, log):
    """Функция подключается к qiwi.кошелек и пополняет баланс на счету mts"""

    site_url = 'https://qiwi.ru/'
    login_url = site_url + 'auth/login.action'
    action_url = site_url + 'transfer/form.action'
    payment_url = site_url + 'user/payment/form/state.action'
    good_upd_bal = []

    for qiwi_login in qiwi_logins:
        ok = True
        while ok:
            try:
                cj = cookielib.CookieJar()
                opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
                opener.addheaders = [('User-agent', 'Mozilla/5.0 (Windows; U; Windows NT 5.1; ru; rv:1.9.2.22) Gecko/20110902 Firefox/3.6.22')]
                urllib2.install_opener(opener)
                opener.addheaders = [('X-Requested-With', 'XMLHttpRequest'),
                                     ('Pragma', 'no-cache'),
                                     ('Referer', 'https://qiwi.ru/payment/form.action?provider=1'),
                                     ('Accept', 'application/json, text/javascript, */*; q=0.01')]
                login_data = urllib.urlencode({'source' : 'menu', 'login' : qiwi_login, 'password' : password})
                resp = opener.open(login_url, login_data)
                res = resp.read()
                r = json.loads(res)
                token = r["data"]["token"]
                login_data = urllib.urlencode({'source' : 'menu', 'login' : qiwi_login, 'password' : password, 'loginToken':token})
                resp = opener.open(login_url, login_data)
                res = resp.read()
                r = json.loads(res)
                result = r["code"]["value"]
                login = False
                if result == '0':
                    login = True
                resp = opener.open(action_url)
                res = resp.read()
                ok = False
            except Exception, x:
                log.info(u"Ошибка открытия страницы %s" % x)
                exc_type, exc_obj, exc_tb = sys.exc_info()  # @UnusedVariable
                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                log.info(u"Exception: file:%s line:%s" % (fname, exc_tb.tb_lineno))
                exit()

        if not login:
            log.info(u"Ошибка доступа в кабинет qiwi")
            return []
        """Проверка баланса кошелька"""
        b = res[res.find('<div class="account_current" data-container-name="account-this">') + len('<div class="account_current" data-container-name="account-this">'):]
        try:
            balance = float(b[:b.find('<')].strip().replace(',', '.').replace(' ', ''))
        except:
            balance = 0
        log.info(u'Баланс кошелька %s составляет: %s' % (qiwi_login, balance))
        balance_limit = False
        i = 0
        for num, pay_sum in numbers:
            i += 1
            if len(good_upd_bal) >= len(numbers):
                return good_upd_bal
            if num in good_upd_bal:
                continue
            if balance < pay_sum:
                balance_limit = True
                continue
            try:
                ok = True
                while ok:
                    resp = opener.open(action_url)
                    res = resp.read()
                    login_data = urllib.urlencode({"extra['account']": num,  # (916)902-43-14",
                                                   "source": "qiwi_RUB",
                                                   "amountInteger": pay_sum,
                                                   "amountFraction": "",
                                                   "currency": "RUB",
                                                   "extra['comment']": "",
                                                   "state": "CONFIRM",
                                                   "protected": "true",
                                                   }
                                                  )
                    resp = opener.open(payment_url, login_data)
                    res = resp.read()
                    r = json.loads(res)
                    token = r["data"]["token"]
                    login_data = urllib.urlencode({"extra['account']": "(%s)%s-%s-%s" % (num[:3], num[3:6], num[6:8], num[8:]),
                                                   "source": "qiwi_RUB",
                                                   "amountInteger": pay_sum,
                                                   "amountFraction": "",
                                                   "currency": "RUB",
                                                   "extra['comment']": "",
                                                   "state": "CONFIRM",
                                                   "protected": "true",
                                                   "token": token,
                                                   }
                                                  )
                    resp = opener.open(payment_url, login_data)
                    res = resp.read()
                    login_data = urllib.urlencode({"state": "PAY"})
                    resp = opener.open(payment_url, login_data)
                    res = resp.read()
                    r = json.loads(res)
                    token = r["data"]["token"]
                    login_data = urllib.urlencode({"token": token, "state": "PAY"})
                    resp = opener.open(payment_url, login_data)
                    res = resp.read()
                    if 'Ваш платеж принят в обработку.' in res:
                        log.info(u'Оплачено: %s %s' % (num, pay_sum))
                        good_upd_bal.append(num)
                        balance = balance - pay_sum
                    else:
                        log.info(u'Не оплачено: %s %s' % (num, pay_sum))
                    ok = False
                    # exit()
            except Exception, x:
                log.info(u"Ошибка открытия страницы %s" % x)
                exc_type, exc_obj, exc_tb = sys.exc_info()  # @UnusedVariable
                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                log.info(u"Exception: file:%s line:%s" % (fname, exc_tb.tb_lineno))
                exit()
#        if balance_limit:
#            continue
    return good_upd_bal



def check_numbers(numbers, res, k, log):
    sim_upd_bal = []
    res = []
    for i, d in enumerate (numbers):
        login, imsi, password = d.split()
        bal = None
        attempt = 0
        while attempt <= 3:
            attempt += 1
            try:
                bal = get_balance(login, password)
                break
            except ExceptionPageDontAvalaible as e:
                log.info(e)
            except ExceptionChangeLocationOfTags as e:
                log.info(e)
            except ExceptionIncorrectData as e:
                log.info(e)
            except Exception, e:
                log.info(e)
        log.info(u"%s %s %s %s %s" % (k + i + 1, login, imsi, password, bal))
        res.append({'login': login, 'imsi': imsi, 'pass': password, 'balance': bal})
        if bal < MIN_BALANCE and bal != None:
            sim_upd_bal.append([login, int(ceil(MIN_BALANCE - bal))])

    if sim_upd_bal:
        qiwi_id = (k - 1) / GROUP_SIM
        pay_mts_from_qiwi(sim_upd_bal, QIWI_LOGINS[qiwi_id], QIWI_PASSWORD, log)
    return res


def check_qiwi(numbers, password, qiwi_upd_bal, k, log):
    res = []
    for i, d in enumerate(numbers):
        login = d
        bal = None
        attempt = 0
        while attempt <= 3:
            attempt += 1
            try:
                bal = qiwi_get_balance(login, password, log, k + i + 1)
                break
            except Exception, e:
                log.info(e)
        # log.info(u"%s %s %s" % (k + i + 1, login, bal))
        res.append({'login': login, 'balance': bal})
        if bal < MIN_BALANCE_QIWI and bal != None:
            qiwi_upd_bal.append([login, int(ceil(MIN_BALANCE_QIWI - bal))])
    return res

def converse_str_to_int(str):
    str = str.strip()
    number = ''
    set_for_float = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ',', '.', '-', '+']
    max_ch = len(str)
    for i in range(max_ch):
        if str[i] in set_for_float:
            number = number + str[i]
        else:
            break
    if len(number):
        number = float(number)
    return number


def logout(ie, log):
    log.debug(u'Производим Logout')
    ie.Navigate("https://login.mts.ru/amserver/UI/Logout")
    while ie.ReadyState != 4:
        time.sleep(1)
    doc = ie.Document
    while doc.readyState != "complete":  # Wait for document to finish
        time.sleep(1)

DEFAULT_TIMEOUT = 10
def add_service(login, password, log):
    balance = None
    import win32com.client
    ADDRESS_SERVICE_LIST = 'https://ihelper.mts.ru/selfcare/product-2-view.aspx'
    ADDRESS_SERVICE_ADD = 'https://ihelper.mts.ru/selfcare/product-2-add.aspx'
    log.debug(u'Подключение услуги для %s %s...' % (login, password))
    ie = win32com.client.DispatchEx("InternetExplorer.Application")
    ie.Visible = 1
    attempt = 5
    while attempt:
        attempt -= 1
        try:
            ie.Navigate(ADRESS)
            while ie.ReadyState != 4:
                time.sleep(1)
            doc = ie.Document
            while doc.readyState != "complete":  # Wait for document to finish
                time.sleep(1)
            doc = ie.Document
            if doc.title == 'Личный кабинет МТС':
                logout(ie, log)
            elif doc.title == 'МТС - Вход в Личный кабинет':
                log.debug(u'Производим Авторизацию')
                doc.forms[0].IDToken1.value = login
                doc.forms[0].IDToken2.value = password
                doc.forms[0].submit()
                while ie.ReadyState != 4:
                    time.sleep(1)
                doc = ie.Document
                while doc.readyState != "complete":  # Wait for document to finish
                    time.sleep(1)
                time.sleep(DEFAULT_TIMEOUT)
                doc = ie.Document
                if doc.title == 'Личный кабинет МТС':
                    log.debug(u'Успешно авторизовались')
                    temp_s = ie.Document.body.innerHTML
                    balance_start = temp_s.find("Balance")
                    temp_s_from_balance = temp_s[balance_start - 1:len(temp_s)]
                    balance_end = temp_s_from_balance.find(',')
                    temp_s_balance = temp_s_from_balance[0:balance_end]
                    balance_arr = temp_s_balance.split(':')
                    balance = balance_arr[1].replace('"', '')
                    balance = float(balance)

                    log.debug(u'Проверяем наличие услуги')
                    ie.Navigate(ADDRESS_SERVICE_LIST)
                    while ie.ReadyState != 4:
                        time.sleep(1)
                    doc = ie.Document
                    while doc.readyState != "complete":  # Wait for document to finish
                        time.sleep(1)
                    time.sleep(DEFAULT_TIMEOUT)
                    log.debug('doc.title - services="%s"' % ie.Document.title)
                    text = ie.Document.body.innerHTML
                    if u'Пользование Интернет-Помощником недоступно. Данные о владельце контракта не подтверждены. Подробности в Контактном центре МТС по номеру 0890.' in text:
                        logout(ie, log)
                        continue
                    if u'Запрет услуги "Я на связи"' in text:
                        log.info(u'Обнаружена лишняя услуга: %s %s' % (login, password))

                    if u'Звони бесплатно на МТС России 100' in text:
                        log.debug(u'услуга подключена ранее')
                        log.info(u'Подключена услуга для %s' % login)
                        try:
                            ie.quit()
                        except:
                            pass
                        return True, balance

                    if balance != None and balance <= MIN_BALANCE_FOR_ADD_SERVICE:
                        log.info(u'Низкий баланс %s' % balance)
                        log.info(u'Не удалось подключить услугу для %s' % login)
                        try:
                            ie.quit()
                        except:
                            pass
                        return False, balance
                    log.debug(u'Подключаем услугу 1 этап')
                    ie.Navigate(ADDRESS_SERVICE_ADD)
                    while ie.ReadyState != 4:
                        time.sleep(1)
                    doc = ie.Document
                    while doc.readyState != "complete":  # Wait for document to finish
                        time.sleep(1)
                    time.sleep(DEFAULT_TIMEOUT)
                    doc = ie.Document
                    form = doc.forms['aspnetForm']
                    f_check = None
                    for i, f in enumerate(form):
                        # log.info("%s '%s'" % (i, f.value))
                        if f.value == 'Звони бесплатно на МТС России 100':
                            f_check = i - 1
                    if f_check:
                        form[f_check].checked = 1
                    else:
                        log.debug(u'Не отметить нужную услугу')
                        continue
                    # exit()

                    log.debug(u'Подключаем услугу 2 этап')
                    f_click = None
                    for i, f in enumerate(form):
                        # log.info("%s %s" % (i, f.name))
                        if f.name == 'ctl00$ctl00$MainContent$nextButton':
                            f_click = f
                    if f_click:
                        f_click.click()
                    else:
                        log.debug(u'Не удалось получить нужную кнопку')
                        continue

                    time.sleep(DEFAULT_TIMEOUT * 2)
                    doc = ie.Document
                    form = doc.forms['aspnetForm']
                    form[8].click()
                    log.debug(u'Подключаем услугу 3 этап')
                    time.sleep(DEFAULT_TIMEOUT * 2)
                    text = ie.Document.body.innerHTML
                    if 'Запрос успешно зарегистрирован.' in text:
                        log.info(u'Подключена услуга для %s' % login)
                        try:
                            ie.quit()
                        except:
                            pass
                        return True, balance
                    else:
                        log.debug(text)
                        log.info(u'Не удалось подключить услугу для %s' % login)
                        try:
                            ie.quit()
                        except:
                            pass
                        return False, balance
                else:
                    log.debug('2doc.title=%s' % doc.title)
            else:
                log.debug('doc.title=%s' % doc.title)
        except Exception, e:
            log.info('tut error')
            try:
                log.info("%s %s" % (e[0], e[1]))
            except Exception, ex:
                log.info(e)
                log.info(ex)
    log.info(u'Не удалось подключить услугу для %s' % login)
    try:
        ie.quit()
    except:
        pass
    return False, balance




data = '''
9153399025    327680    Uuyp5Q
9153392133    327650    g2IgUP
9153433383    327862    aT3qMh
9153399974    327801    wO8CTN
9153155031    325522    N0Qxhz
9153399976    327802    9l1D51
9153413634    327828    8Ylbpb
9153411534    327823    ooprL4
9153393966    327657    3UKd6k
9153434036    327866    quC8oe
9153155513    325525    ayeP6r
9153405434    327817    FJ5dDt
9153399066    327687    K6mD4j
9153408408    327821    GZf0tl
9153434249    327893    aQXTp2
9153399053    327684    2Oa2eb
9153408340    327820    JthU5k
9153434124    327874    8xTqb8
9153434135    327875    6OdmPL
9153434112    327873    rYb3cB
9153405405    327816    TrxQ7l
9153399986    327805    n1u1Ik
9153399081    327691    jEL2AZ
9153396662    327668    Titl5f
9153434044    327868    h4zIVi
9153434306    327896    hg3bN6
9153399058    327685    UGJG9n
9153394977    327663    bJk44O
9153398233    327676    Kuvu2l
9153399092  327692  OK1j0p
9153399156  327699  8jD2gu
9153434181  327883  2n6v2G
9153434213  327885  9Ybk90
9153434230  327888  IdA08R
9153426334  327849  8WthGs
9153394233  327659  sIs8N0
9153434284  327895  YLeV4p
9153423134  327841  ftkC0y
9153434228  327887  ULx9qv
9153434143  327879  KKu86p
9153434319  327898  x3ZLfV
9153399149  327698  MTLF4z
9153434064  327872  Yi1C0q
9153434047  327870  sQKEN4
9153434320  327899  e8Lbkq
9153434214  327886  QH4fIv
9153423422  327845  KU8oaX
9153434316  327897  MOy4St
9153408334  327819  sUR6jX
9153399061  327686  iRcfs4
9153434191  327884  eHoJ4y
9152924329  324745  Vv5dkKW
9152924329 324745 ocoZF7
9153427342    327851    y2GRWy
9153405405    327816    TrxQ7l
'''

if __name__ == '__main__':

    """Генерируем имя для лог-файла"""
    today = datetime.datetime.now()
    LOG_FILENAME = 'logs/' + today.strftime("balance-%Y-%m-%d %H-%M") + '.log'

    # create console handler
    formatter_ch = logging.Formatter(u"%(asctime)s - %(message)s", datefmt='%Y-%m-%d %H:%M:%S')
    ch = logging.StreamHandler()
    ch.setLevel(logging.INFO)
    ch.setFormatter(formatter_ch)
    # create file handler
    formatter = logging.Formatter(u"%(asctime)s - %(levelname)s - %(message)s", datefmt='%Y-%m-%d %H:%M:%S')
    fl = logging.FileHandler(filename=LOG_FILENAME, encoding='utf-8')
    fl.setLevel(logging.DEBUG)
    fl.setFormatter(formatter)
    # create logger
    log = logging.getLogger('mts')
    log.setLevel(logging.DEBUG)
    log.addHandler(ch)
    log.addHandler(fl)

    # pay_mts_from_qiwi(['123', 1], QIWI_LOGIN, QIWI_PASSWORD, log)
    # exit()

    log.info(u'Start')

    sim_upd_bal = []
    numbers = data.splitlines()
    res = []
    bad_res = []
    for i, dat in enumerate(numbers):
        if not dat:
            continue
        number, imsi, password = dat.split()
        res, balance = add_service(number, password, log)
        if not res:
            bad_res.append(dat)
            if balance != None and balance < MIN_BALANCE_FOR_ADD_SERVICE:
                # print balance
                # print MIN_BALANCE_FOR_ADD_SERVICE
                # print ceil(MIN_BALANCE_FOR_ADD_SERVICE - balance)
                # print int(ceil(MIN_BALANCE_FOR_ADD_SERVICE - balance))
                sim_upd_bal.append([number, int(ceil(MIN_BALANCE_FOR_ADD_SERVICE - balance))])
        if len(sim_upd_bal) >= 5:
            qiwi_id = (i - 1) / GROUP_SIM
            pay_mts_from_qiwi(sim_upd_bal, QIWI_LOGINS[qiwi_id], QIWI_PASSWORD, log)
            sim_upd_bal = []
    if sim_upd_bal:
        qiwi_id = (i - 1) / GROUP_SIM
        pay_mts_from_qiwi(sim_upd_bal, QIWI_LOGINS[qiwi_id], QIWI_PASSWORD, log)
        sim_upd_bal = []
    for b in bad_res:
        print b
    log.info(u'Stop')

